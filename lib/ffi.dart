// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Owlchat KeyStore Binding
class RawKeyStore {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  RawKeyStore(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<ffi.Int8> keystore_backup(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<Fixed32Array> seed,
  ) {
    _keystore_backup ??=
        _dylib.lookupFunction<_c_keystore_backup, _dart_keystore_backup>(
            'keystore_backup');
    return _keystore_backup(
      ks,
      seed,
    );
  }

  _dart_keystore_backup _keystore_backup;

  int keystore_decrypt(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<SharedBuffer> data,
    ffi.Pointer<Fixed32Array> shared_secret,
  ) {
    _keystore_decrypt ??=
        _dylib.lookupFunction<_c_keystore_decrypt, _dart_keystore_decrypt>(
            'keystore_decrypt');
    return _keystore_decrypt(
      ks,
      data,
      shared_secret,
    );
  }

  _dart_keystore_decrypt _keystore_decrypt;

  int keystore_dh(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<Fixed32Array> their_public,
    ffi.Pointer<Fixed32Array> out,
  ) {
    _keystore_dh ??=
        _dylib.lookupFunction<_c_keystore_dh, _dart_keystore_dh>('keystore_dh');
    return _keystore_dh(
      ks,
      their_public,
      out,
    );
  }

  _dart_keystore_dh _keystore_dh;

  int keystore_encrypt(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<SharedBuffer> data,
    ffi.Pointer<Fixed32Array> shared_secret,
  ) {
    _keystore_encrypt ??=
        _dylib.lookupFunction<_c_keystore_encrypt, _dart_keystore_encrypt>(
            'keystore_encrypt');
    return _keystore_encrypt(
      ks,
      data,
      shared_secret,
    );
  }

  _dart_keystore_encrypt _keystore_encrypt;

  void keystore_free(
    ffi.Pointer<ffi.Void> ks,
  ) {
    _keystore_free ??= _dylib
        .lookupFunction<_c_keystore_free, _dart_keystore_free>('keystore_free');
    return _keystore_free(
      ks,
    );
  }

  _dart_keystore_free _keystore_free;

  ffi.Pointer<ffi.Void> keystore_init(
    ffi.Pointer<Fixed32Array> secret_key,
  ) {
    _keystore_init ??= _dylib
        .lookupFunction<_c_keystore_init, _dart_keystore_init>('keystore_init');
    return _keystore_init(
      secret_key,
    );
  }

  _dart_keystore_init _keystore_init;

  ffi.Pointer<ffi.Void> keystore_new() {
    _keystore_new ??= _dylib
        .lookupFunction<_c_keystore_new, _dart_keystore_new>('keystore_new');
    return _keystore_new();
  }

  _dart_keystore_new _keystore_new;

  int keystore_public_key(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<Fixed32Array> out,
  ) {
    _keystore_public_key ??= _dylib.lookupFunction<_c_keystore_public_key,
        _dart_keystore_public_key>('keystore_public_key');
    return _keystore_public_key(
      ks,
      out,
    );
  }

  _dart_keystore_public_key _keystore_public_key;

  ffi.Pointer<ffi.Void> keystore_restore(
    ffi.Pointer<ffi.Int8> paper_key,
  ) {
    _keystore_restore ??=
        _dylib.lookupFunction<_c_keystore_restore, _dart_keystore_restore>(
            'keystore_restore');
    return _keystore_restore(
      paper_key,
    );
  }

  _dart_keystore_restore _keystore_restore;

  int keystore_secret_key(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<Fixed32Array> out,
  ) {
    _keystore_secret_key ??= _dylib.lookupFunction<_c_keystore_secret_key,
        _dart_keystore_secret_key>('keystore_secret_key');
    return _keystore_secret_key(
      ks,
      out,
    );
  }

  _dart_keystore_secret_key _keystore_secret_key;

  int keystore_seed(
    ffi.Pointer<ffi.Void> ks,
    ffi.Pointer<Fixed32Array> out,
  ) {
    _keystore_seed ??= _dylib
        .lookupFunction<_c_keystore_seed, _dart_keystore_seed>('keystore_seed');
    return _keystore_seed(
      ks,
      out,
    );
  }

  _dart_keystore_seed _keystore_seed;

  void keystore_string_free(
    ffi.Pointer<ffi.Int8> ptr,
  ) {
    _keystore_string_free ??= _dylib.lookupFunction<_c_keystore_string_free,
        _dart_keystore_string_free>('keystore_string_free');
    return _keystore_string_free(
      ptr,
    );
  }

  _dart_keystore_string_free _keystore_string_free;
}

abstract class OperationStatus {
  static const int OK = 0;
  static const int Unknwon = 1;
  static const int KeyStoreNotInialized = 2;
  static const int BadFixed32ArrayProvided = 3;
  static const int BadSharedBufferProvided = 4;
  static const int KeyStoreHasNoSeed = 5;
  static const int AeadError = 6;
  static const int Bip39Error = 7;
  static const int Utf8Error = 8;
}

class Fixed32Array extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> buf;
}

class SharedBuffer extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> buf;

  @ffi.Uint64()
  int len;

  @ffi.Uint64()
  int cap;
}

typedef _c_keystore_backup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> seed,
);

typedef _dart_keystore_backup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> seed,
);

typedef _c_keystore_decrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<SharedBuffer> data,
  ffi.Pointer<Fixed32Array> shared_secret,
);

typedef _dart_keystore_decrypt = int Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<SharedBuffer> data,
  ffi.Pointer<Fixed32Array> shared_secret,
);

typedef _c_keystore_dh = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> their_public,
  ffi.Pointer<Fixed32Array> out,
);

typedef _dart_keystore_dh = int Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> their_public,
  ffi.Pointer<Fixed32Array> out,
);

typedef _c_keystore_encrypt = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<SharedBuffer> data,
  ffi.Pointer<Fixed32Array> shared_secret,
);

typedef _dart_keystore_encrypt = int Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<SharedBuffer> data,
  ffi.Pointer<Fixed32Array> shared_secret,
);

typedef _c_keystore_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ks,
);

typedef _dart_keystore_free = void Function(
  ffi.Pointer<ffi.Void> ks,
);

typedef _c_keystore_init = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Fixed32Array> secret_key,
);

typedef _dart_keystore_init = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<Fixed32Array> secret_key,
);

typedef _c_keystore_new = ffi.Pointer<ffi.Void> Function();

typedef _dart_keystore_new = ffi.Pointer<ffi.Void> Function();

typedef _c_keystore_public_key = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> out,
);

typedef _dart_keystore_public_key = int Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> out,
);

typedef _c_keystore_restore = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> paper_key,
);

typedef _dart_keystore_restore = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> paper_key,
);

typedef _c_keystore_secret_key = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> out,
);

typedef _dart_keystore_secret_key = int Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> out,
);

typedef _c_keystore_seed = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> out,
);

typedef _dart_keystore_seed = int Function(
  ffi.Pointer<ffi.Void> ks,
  ffi.Pointer<Fixed32Array> out,
);

typedef _c_keystore_string_free = ffi.Void Function(
  ffi.Pointer<ffi.Int8> ptr,
);

typedef _dart_keystore_string_free = void Function(
  ffi.Pointer<ffi.Int8> ptr,
);
